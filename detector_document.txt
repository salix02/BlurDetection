By Joseph Salim

This program takes in an input image name and outputs a 1 if the image is 'blurry' and 0 otherwise. 

************************How I tackled this problem********************************
1. Researched blur detection algorithms.
2. Tested the most common algorithm (laplacian variance metric) with about 80% success rate.
3. Considered other methods: FFT response on image, however this was quite complex
4. Tried other filters and their variance whether it can provide an improvement to the laplacian kernel.


************************Algorithm Explanation*************************************
The image is firstly imported as a grayscale version to flatten the image into one colour dimension. This is done rather than using a single colour channel (red for example) to retain as much information as possible rather than throwing away two other channels.

A Sobel filter is applied on this grayscale version of the image in both x and y directions individually creating a gradient of the image intensity. This is done separately to identify 'vertical' and 'horizontal' edges.

The variance of the Sobel filtered image is used as the metric for determining blurriness. I assumed that if an image contains high variance, then there is a wide spread of response from edges and non-edges. A low variance suggests that there are little edges, i.e. blurry. This assumption may render the program faulty should an image even in focus has edges which are not quite visible.

Since an image in focus can have more edges in either x or y direction, the maximum variance in either dimension is taken as the metric of blurryness. A threshold of 130000 is obtained by experimenting and anything with variance above this number is considered not blurry.


************************Algorithm Validation**************************************
The algorithm was validated through a check whether the correct output was given based on the provided images. In addition, more blurry and sharp images was taken and used as an input to check the program.

************************Algorithm Assumptions/Limitations*************************
A non blurry image is assumed to be one with visible edges.
Limitation is on the accuracy of the threshold. Since it was a number generated by experimenting on a small sample space, errors may arise on bigger sample space.

************************Possible Improvements*************************************
Perhaps a multiple check through different methods can be used to reaffirm the conclusion made on an image classification.
The use of neural networks for image classification could possibly prove to be a possible method.

